<?xml version="1.0" encoding="UTF-8"?><process version="9.10.001">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="9.10.001" expanded="true" name="Process">
    <parameter key="logverbosity" value="init"/>
    <parameter key="random_seed" value="2001"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="SYSTEM"/>
    <process expanded="true">
      <operator activated="true" class="jdbc_connectors:read_database" compatibility="9.10.001" expanded="true" height="82" name="Last Consumption" width="90" x="45" y="34">
        <parameter key="define_connection" value="repository"/>
        <parameter key="connection_entry" value="/Connections/DB"/>
        <parameter key="database_system" value="MySQL"/>
        <parameter key="define_query" value="query"/>
        <parameter key="query" value="SELECT `id`, `value`,`created_at`, `user_id`&#10;FROM `consumptions`&#10;WHERE deleted_at IS NULL&#10;ORDER BY created_at DESC LIMIT 1"/>
        <parameter key="use_default_schema" value="true"/>
        <parameter key="prepare_statement" value="false"/>
        <enumeration key="parameters"/>
        <parameter key="datamanagement" value="double_array"/>
        <parameter key="data_management" value="auto"/>
      </operator>
      <operator activated="true" class="utility:create_exampleset" compatibility="9.10.001" expanded="true" height="68" name="Result Model" width="90" x="45" y="238">
        <parameter key="generator_type" value="attribute functions"/>
        <parameter key="number_of_examples" value="100"/>
        <parameter key="use_stepsize" value="false"/>
        <list key="function_descriptions">
          <parameter key="consumption" value="&quot;&quot;"/>
          <parameter key="expected_consumption" value="&quot;&quot;"/>
          <parameter key="expected_division" value="&quot;&quot;"/>
          <parameter key="created_at" value="&quot;&quot;"/>
          <parameter key="standby" value="&quot;&quot;"/>
          <parameter key="expected_standby" value="&quot;&quot;"/>
          <parameter key="ids" value="0"/>
          <parameter key="equipment" value="&quot;&quot;"/>
          <parameter key="equipment_consumption" value="&quot;-1&quot;"/>
          <parameter key="standby_mode" value="&quot;No&quot;"/>
          <parameter key="new_line" value="0"/>
          <parameter key="consumption_id" value="0"/>
          <parameter key="user_id" value="0"/>
        </list>
        <parameter key="add_id_attribute" value="false"/>
        <list key="numeric_series_configuration"/>
        <list key="date_series_configuration"/>
        <list key="date_series_configuration (interval)"/>
        <parameter key="date_format" value="yyyy-MM-dd HH:mm:ss"/>
        <parameter key="time_zone" value="SYSTEM"/>
        <parameter key="column_separator" value=","/>
        <parameter key="parse_all_as_nominal" value="false"/>
        <parameter key="decimal_point_character" value="."/>
        <parameter key="trim_attribute_names" value="true"/>
      </operator>
      <operator activated="true" class="jdbc_connectors:read_database" compatibility="9.10.001" expanded="true" height="82" name="Equipments (2)" width="90" x="581" y="136">
        <parameter key="define_connection" value="repository"/>
        <parameter key="connection_entry" value="/Connections/DB"/>
        <parameter key="database_system" value="MySQL"/>
        <parameter key="define_query" value="query"/>
        <parameter key="query" value="SELECT * &#10;FROM `equipments` e &#10;WHERE e.user_id IN (SELECT user_id FROM consumptions WHERE created_at = (SELECT MAX(created_at) FROM consumptions))&#10;AND deleted_at IS NULL"/>
        <parameter key="use_default_schema" value="true"/>
        <parameter key="prepare_statement" value="false"/>
        <enumeration key="parameters"/>
        <parameter key="datamanagement" value="double_array"/>
        <parameter key="data_management" value="auto"/>
      </operator>
      <operator activated="true" class="jdbc_connectors:read_database" compatibility="9.10.001" expanded="true" height="82" name="Last Consumption (2)" width="90" x="581" y="238">
        <parameter key="define_connection" value="repository"/>
        <parameter key="connection_entry" value="/Connections/DB"/>
        <parameter key="database_system" value="MySQL"/>
        <parameter key="define_query" value="query"/>
        <parameter key="query" value="SELECT `id`, `value`,`created_at`&#10;FROM `consumptions`&#10;WHERE deleted_at IS NULL&#10;ORDER BY created_at DESC LIMIT 1"/>
        <parameter key="use_default_schema" value="true"/>
        <parameter key="prepare_statement" value="false"/>
        <enumeration key="parameters"/>
        <parameter key="datamanagement" value="double_array"/>
        <parameter key="data_management" value="auto"/>
      </operator>
      <operator activated="true" class="jdbc_connectors:read_database" compatibility="9.10.001" expanded="true" height="82" name="Equipments" width="90" x="45" y="136">
        <parameter key="define_connection" value="repository"/>
        <parameter key="connection_entry" value="/Connections/DB"/>
        <parameter key="database_system" value="MySQL"/>
        <parameter key="define_query" value="query"/>
        <parameter key="query" value="SELECT * &#10;FROM `equipments` e &#10;WHERE e.user_id IN (SELECT user_id FROM consumptions WHERE created_at = (SELECT MAX(created_at) FROM consumptions))&#10;AND deleted_at IS NULL"/>
        <parameter key="use_default_schema" value="true"/>
        <parameter key="prepare_statement" value="false"/>
        <enumeration key="parameters"/>
        <parameter key="datamanagement" value="double_array"/>
        <parameter key="data_management" value="auto"/>
      </operator>
      <operator activated="true" class="utility:create_exampleset" compatibility="9.10.001" expanded="true" height="68" name="Response Model" width="90" x="1050" y="289">
        <parameter key="generator_type" value="attribute functions"/>
        <parameter key="number_of_examples" value="1"/>
        <parameter key="use_stepsize" value="false"/>
        <list key="function_descriptions">
          <parameter key="code" value="&quot;&quot;"/>
          <parameter key="response" value="&quot;&quot;"/>
        </list>
        <parameter key="add_id_attribute" value="false"/>
        <list key="numeric_series_configuration"/>
        <list key="date_series_configuration"/>
        <list key="date_series_configuration (interval)"/>
        <parameter key="date_format" value="yyyy-MM-dd HH:mm:ss"/>
        <parameter key="time_zone" value="SYSTEM"/>
        <parameter key="column_separator" value=","/>
        <parameter key="parse_all_as_nominal" value="false"/>
        <parameter key="decimal_point_character" value="."/>
        <parameter key="trim_attribute_names" value="true"/>
      </operator>
      <operator activated="true" class="execute_script" compatibility="9.10.001" expanded="true" height="124" name="Main Script" width="90" x="380" y="34">
        <parameter key="script" value="import java.util.*;&#10;&#10;//INPUTS&#10;lastConsumption = input[0];&#10;equipments = input[1];&#10;resultModel = input[2];&#10;&#10;&#10;//LISTAS&#10;divisionsByHandling = new ArrayList&lt;&gt;();&#10;allEquipments = new ArrayList&lt;&gt;();&#10;equipmentsSeen = new ArrayList&lt;&gt;();&#10;equipmentsON = new ArrayList&lt;&gt;();&#10;&#10;//VARIÁVEIS&#10;totalWatts = (double)lastConsumption.getExample(0)[&quot;value&quot;]; //Assumindo que gastamos sempre um x watts para equipamnentos em standby (valor introduzido no excel dos equipamentos da habitação)&#10;resultModel.getExample(0)['created_at'] = lastConsumption.getExample(0)[&quot;created_at&quot;];&#10;divisions = new int[8];&#10;bestConsumptionMatch = 0;&#10;&#10;&#10;//preencher lista com valores de potência de cada equipamento&#10;for(int i = 0; i &lt; equipments.size(); i++){&#10;&#9;allEquipments.add(equipments.getExample(i)['consumption']);&#10;}&#10;&#10;&#10;//Funcão para fazer previsões de quais os equipamentos que estão ligados&#10;equipmentsON = calculateConsumption(allEquipments, totalWatts);&#10;&#10;&#10;//Adicionar a potencia de cada equipamento ao novo example set devolvido&#10;for(int i = 0; i &lt; equipmentsON.size(); i++){&#10;&#9;resultModel.getExample(i)['equipment_consumption'] = equipmentsON.get(i);&#10;&#10;&#9;//Guardar outras informações para além da potência sobre os equipamentos em uso&#10;&#9;for(int j = 0; j &lt; equipments.size(); j++){&#10;&#9;&#9;if(equipments.getExample(j)['consumption'] == equipmentsON.get(i) &amp;&amp; !equipmentsSeen.contains(equipments.getExample(j)['id'])){&#10;&#9;&#9;&#9;equipmentsSeen.add(equipments.getExample(j)['id']);&#10;&#9;&#9;&#9;resultModel.getExample(i)['ids'] = equipments.getExample(j)['id'];&#10;&#9;&#9;&#9;resultModel.getExample(i)['equipment'] = equipments.getExample(j)['name'];&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;if(equipments.getExample(j)['handling'] == &quot;Humano&quot;){&#10;&#9;&#9;&#9;&#9;divisionsByHandling.add(equipments.getExample(j)['division']);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;else{&#10;&#9;&#9;&#9;&#9;switch(equipments.getExample(j)['division']){&#10;&#9;&#9;&#9;&#9;&#9;case &quot;Living room&quot;:&#10;&#9;&#9;&#9;&#9;&#9;&#9;divisions[0]++;&#9;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case &quot;Kitchen&quot;:&#10;&#9;&#9;&#9;&#9;&#9;&#9;divisions[1]++;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case &quot;Bedroom&quot;:&#10;&#9;&#9;&#9;&#9;&#9;&#9;divisions[2]++;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case &quot;Toilet&quot;:&#10;&#9;&#9;&#9;&#9;&#9;&#9;divisions[3]++;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#9;&#10;&#9;&#9;&#9;&#9;&#9;case &quot;Laundry&quot;:&#10;&#9;&#9;&#9;&#9;&#9;&#9;divisions[4]++;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#9;&#10;&#9;&#9;&#9;&#9;&#9;case &quot;Office&quot;:&#10;&#9;&#9;&#9;&#9;&#9;&#9;divisions[5]++;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#9;&#10;&#9;&#9;&#9;&#9;&#9;case &quot;Outside&quot;:&#10;&#9;&#9;&#9;&#9;&#9;&#9;divisions[6]++;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#9;&#10;&#9;&#9;&#9;&#9;&#9;default:&#10;&#9;&#9;&#9;&#9;&#9;&#9;divisions[7]++;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;resultModel.getExample(0)['new_line'] = i + 1;&#10;&#9;&#9;&#9;break; //depois de encontrar a correspondência do equipamento nao precisa de percorrer o resto da lista&#10;&#9;&#9;}&#10;&#9;}&#10;&#9;&#10;}&#10;&#10;&#10;//Se existir algum equipamento que necessite de manuseamento humano nos dispositivos ligados&#10;if(divisionsByHandling.size() != 0){&#10;&#9;for(int i=0; i&lt; divisionsByHandling.size(); i++){&#10;&#9;&#9;//Apenas adiciona os valores que nao estão na lista de divisões&#10;&#9;&#9;if(!(resultModel.getExample(0)['expected_division'].contains(divisionsByHandling.get(i))))&#10;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += divisionsByHandling.get(i) + &quot; | &quot;;&#10;&#9;}&#10;}&#10;else{&#10;&#9;maximo = 0;&#10;&#9;&#10;&#9;for(int i=0; i&lt;divisions.length; i++){&#10;&#9;&#9;&#10;&#9;&#9;//saber divisão com mais dispositivos ligados utilizando o vetor criado anteriormente&#10;&#9;&#9;if(divisions[maximo]&lt;=divisions[i]){&#10;&#9;&#9;&#9;maximo= i;//Obter a divisão (posicao i do vetor)&#10;&#9;&#9;}&#10;&#9;&#9;&#10;&#9;}&#10;&#10;&#9;&#9;&#10;&#9;//Saber divisão mais provavel que o utilizador esteja&#10;&#9;for(int i=0; i&lt;divisions.length; i++){&#10;&#9;&#9;&#10;&#9;&#9;if(divisions[i]==divisions[maximo]){&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;switch(i){&#10;&#9;&#9;&#9;&#9;case '0':&#10;&#9;&#9;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += &quot;Living room &quot;;&#10;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;case '1':&#10;&#9;&#9;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += &quot;Kitchen &quot;;&#10;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;case '2':&#10;&#9;&#9;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += &quot;Bedroom &quot;;&#10;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;case '3':&#10;&#9;&#9;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += &quot;Toilet &quot;;&#10;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;case '4':&#10;&#9;&#9;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += &quot;Laundry &quot;;&#10;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;case '5':&#10;&#9;&#9;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += &quot;Office &quot;;&#10;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;case '6':&#10;&#9;&#9;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += &quot;Outside &quot;;&#10;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;default:&#10;&#9;&#9;&#9;&#9;&#9;resultModel.getExample(0)['expected_division'] += &quot;Outro &quot;;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;&#10;//FUNCÕES----------------------------------------------------------------------------------------------------&#10;void calculateConsumptionRecursive(ArrayList&lt;Double&gt; devices, double target, ArrayList&lt;Double&gt; partial){&#10;&#9;double sum = 0.0;&#10;&#9;for (double x : partial) {&#10;&#9;&#9;sum += x;&#10;&#9;  &#9;if (sum &gt; bestConsumptionMatch &amp;&amp; sum &lt;= target) {&#10;&#9;     &#9;bestConsumptionMatch = sum;&#10;&#9;      &#9;equipmentsON = new ArrayList&lt;&gt;(partial);&#10;&#9;  &#9;}&#10;&#9;}&#10;&#9;if (sum &gt;= target)&#10;&#9;&#9;return;&#10;&#9;&#10;&#9;for (int i = 0; i &lt; devices.size(); i++) {&#10;&#9;&#9;ArrayList&lt;Double&gt; remaining = new ArrayList&lt;&gt;();&#10;&#9;  &#9;double n = devices.get(i);&#10;&#9;  &#9;for (int j = i + 1; j &lt; devices.size(); j++) {&#10;&#9;     &#9;remaining.add(devices.get(j));&#10;&#9;  &#9;}&#10;&#9;&#10;&#9;  &#9;ArrayList&lt;Double&gt; partial_rec = new ArrayList&lt;&gt;(partial);&#10;&#9;  &#9;partial_rec.add(n);&#10;&#9;  &#9;calculateConsumptionRecursive(remaining, target, partial_rec);&#10;&#9;}&#10;}&#10;&#10;ArrayList&lt;Double&gt; calculateConsumption(ArrayList&lt;Double&gt; devices, double totalConsumption){&#10;&#9;calculateConsumptionRecursive(devices, totalConsumption, new ArrayList&lt;&gt;());&#10;&#9;return equipmentsON;&#10;}&#10;//-----------------------------------------------------------------------------------------------------------&#10;&#10;resultModel.getExample(0)['consumption'] = bestConsumptionMatch;&#10;resultModel.getExample(0)['expected_consumption'] = totalWatts;&#10;resultModel.getExample(0)['created_at'] = lastConsumption.getExample(0)[&quot;created_at&quot;];&#10;resultModel.getExample(0)['consumption_id'] = lastConsumption.getExample(0)[&quot;id&quot;];&#10;resultModel.getExample(0)['user_id'] = lastConsumption.getExample(0)[&quot;user_id&quot;];&#10;&#10;return resultModel;"/>
        <parameter key="standard_imports" value="true"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.10.001" expanded="true" height="82" name="Multiply" width="90" x="581" y="34"/>
      <operator activated="true" class="execute_script" compatibility="9.10.001" expanded="true" height="124" name="Standby Script" width="90" x="782" y="34">
        <parameter key="script" value="processedData = input[0];&#10;equipments = input[1];&#10;dailyConsumption = input[2];&#10;&#10;closestConsumption = 0;&#10;equipmentsOFF = new ArrayList&lt;&gt;();&#10;equipmentsONAux = new ArrayList&lt;&gt;();&#10;equipmentsON = new ArrayList&lt;&gt;();&#10;equipmentsSeen = new ArrayList&lt;&gt;();&#10;equipmentsONInput = new ArrayList&lt;&gt;();&#10;totalWatts = (double)0;&#10;minConsumption = 9999999;&#10;&#10;for (int i = 0; i &lt; processedData.size(); i++){&#10;&#9;if(processedData.getExample(i)['equipment_consumption'] != '-1')&#10;&#9;&#9;equipmentsONInput.add(processedData.getExample(i)['ids']); &#10;}&#10;&#10;//preencher lista com valores de potência standby dos equipments&#10;for (int i = 0; i &lt; equipments.size(); i++){&#10;&#9;if (equipments.getExample(i)['standby'] &gt; 0 &amp;&amp; !contains(equipmentsONInput, equipments.getExample(i)['id'])){&#10;&#9;&#9;//equipments que poderam estar em standby&#10;&#9;&#9;equipmentsOFF.add(equipments.getExample(i)['standby']);&#10;&#9;&#9;if (equipments.getExample(i)['standby'] &lt; minConsumption){&#10;&#9;&#9;&#9;minConsumption = (double)equipments.getExample(i)['standby'];&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;totalWatts = Double.parseDouble(processedData.getExample(0)['expected_consumption']) - Double.parseDouble(processedData.getExample(0)['consumption']);&#10;pos = processedData.getExample(0)['new_line'];&#10; &#10;if (minConsumption &lt;= totalWatts)&#10;&#9;equipmentsON = calculateConsumption(equipmentsOFF, totalWatts);&#10;&#9;&#10;&#10;for (int i = 0; i &lt; equipmentsON.size(); i++){&#10;&#9;processedData.getExample(pos)['equipment_consumption'] = equipmentsON.get(i);&#10;&#9;&#10;&#9;for (int j = 0; j &lt; equipments.size(); j++){&#10;&#9;&#9;if (equipments.getExample(j)['standby'] == equipmentsON.get(i) &amp;&amp; !equipmentsSeen.contains(equipments.getExample(j)['id'])){&#9;&#9;&#10;&#9;&#9;&#9;equipmentsSeen.add(equipments.getExample(j)['id']);&#10;&#9;&#9;&#9;processedData.getExample(pos)['ids'] = equipments.getExample(j)['id'];&#10;&#9;&#9;&#9;processedData.getExample(pos)['equipment'] = equipments.getExample(j)['name'];&#10;&#9;&#9;&#9;processedData.getExample(pos)['standby_mode'] = &quot;Yes&quot;;&#10;&#9;&#9;&#9;pos++;&#10;&#9;&#9;&#9;break;&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;&#10;boolean contains(ArrayList&lt;Integer&gt; ids, double id) {&#10;&#9;for (int i = 0; i &lt; ids.size(); i++) {&#10;&#9;&#9;if (ids[i] == id) {&#10;&#9;&#9;&#9;return true&#10;&#9;&#9;}&#10;&#9;}&#10;&#9;return false&#10;}&#10;&#9;&#9;&#10;&#9;&#9;&#9;&#10;//Funcões------------------------------------------------------------------&#10;void calculateConsumptionRecursive(ArrayList&lt;Double&gt; devices, double target, ArrayList&lt;Double&gt; partial){&#10;&#9;double sum = 0.0;&#10;&#9;for (double x : partial) {&#10;&#9;&#9;sum += x;&#10;&#9;  &#9;if (sum &gt; closestConsumption &amp;&amp; sum &lt;= target) {&#10;&#9;     &#9;closestConsumption = sum;&#10;&#9;      &#9;equipmentsONAux = new ArrayList&lt;&gt;(partial);&#10;&#9;  &#9;}&#10;&#9;}&#10;&#9;if (sum &gt;= target)&#10;&#9;&#9;return;&#10;&#9;&#10;&#9;for (int i = 0; i &lt; devices.size(); i++) {&#10;&#9;&#9;ArrayList&lt;Double&gt; remaining = new ArrayList&lt;&gt;();&#10;&#9;  &#9;double n = devices.get(i);&#10;&#9;  &#9;for (int j = i + 1; j &lt; devices.size(); j++) {&#10;&#9;     &#9;remaining.add(devices.get(j));&#10;&#9;  &#9;}&#10;&#9;&#10;&#9;  &#9;ArrayList&lt;Double&gt; partial_rec = new ArrayList&lt;&gt;(partial);&#10;&#9;  &#9;partial_rec.add(n);&#10;&#9;  &#9;calculateConsumptionRecursive(remaining, target, partial_rec);&#10;&#9;}&#10;}&#10;&#10;ArrayList&lt;Double&gt; calculateConsumption(ArrayList&lt;Double&gt; devices, double totalConsumption){&#10;&#9;calculateConsumptionRecursive(devices, totalConsumption, new ArrayList&lt;&gt;());&#10;&#9;return equipmentsONAux;&#10;}&#10;&#10;&#10;processedData.getExample(0)['standby'] = Math.round(closestConsumption * 100) / 100;&#10;processedData.getExample(0)['expected_standby'] = Math.round(totalWatts * 100) / 100;&#10;&#10;&#10;&#10;return processedData;"/>
        <parameter key="standard_imports" value="true"/>
      </operator>
      <operator activated="true" class="filter_examples" compatibility="9.10.001" expanded="true" height="103" name="With Consumption" width="90" x="916" y="34">
        <parameter key="parameter_expression" value=""/>
        <parameter key="condition_class" value="custom_filters"/>
        <parameter key="invert_filter" value="false"/>
        <list key="filters_list">
          <parameter key="filters_entry_key" value="equipment_consumption.does_not_equal.-1"/>
        </list>
        <parameter key="filters_logic_and" value="false"/>
        <parameter key="filters_check_metadata" value="true"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.10.001" expanded="true" height="103" name="Multiply (2)" width="90" x="1050" y="34"/>
      <operator activated="true" class="select_attributes" compatibility="9.10.001" expanded="true" height="82" name="Select Attributes" width="90" x="1251" y="34">
        <parameter key="attribute_filter_type" value="subset"/>
        <parameter key="attribute" value=""/>
        <parameter key="attributes" value="created_at|expected_division|expected_standby|standby|expected_consumption|consumption|consumption_id|user_id|standby_mode|equipment|equipment_consumption|ids"/>
        <parameter key="use_except_expression" value="false"/>
        <parameter key="value_type" value="attribute_value"/>
        <parameter key="use_value_type_exception" value="false"/>
        <parameter key="except_value_type" value="time"/>
        <parameter key="block_type" value="attribute_block"/>
        <parameter key="use_block_type_exception" value="false"/>
        <parameter key="except_block_type" value="value_matrix_row_start"/>
        <parameter key="invert_selection" value="false"/>
        <parameter key="include_special_attributes" value="false"/>
      </operator>
      <operator activated="true" class="execute_script" compatibility="9.10.001" expanded="true" height="103" name="Create Observation Script" width="90" x="1251" y="187">
        <parameter key="script" value="processedData = input[0];&#10;response = input[1];&#10;&#10;consumption_id = processedData.getExample(0)['consumption_id']&#10;user_id = processedData.getExample(0)['user_id']&#10;expected_division = processedData.getExample(0)['expected_division']&#10;equipmentsString = ''&#10;&#10;for (int i = 0; i &lt; processedData.size(); i++){&#10;&#9;if(processedData.getExample(i)['equipment_consumption'] != &quot;-1&quot; &amp;&amp; processedData.getExample(i)['standby_mode'] == 'No') {&#10;&#9;&#9;equipmentsString += processedData.getExample(i)['ids'] + (i + 1 &lt; processedData.size() ? ',' : '')&#10;&#9;}&#10;}&#10;&#10;post = new URL(&quot;http://userconsumptionapi.test/api/observations&quot;).openConnection();&#10;message = '{&quot;user_id&quot;:' + user_id + ',&quot;consumption_id&quot;:' + consumption_id + ',&quot;expected_division&quot;:&quot;' + expected_division + '&quot;,&quot;equipments&quot;:[' + equipmentsString + ']}'&#10;post.setRequestMethod(&quot;POST&quot;)&#10;post.setDoOutput(true)&#10;post.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;post.getOutputStream().write(message.getBytes(&quot;UTF-8&quot;))&#10;&#10;response.getExample(0)['code'] = post.getResponseCode();&#10;response.getExample(0)['response'] = post.getInputStream().getText().replace(&quot;\n&quot;, &quot;&quot;);&#10;&#10;return response;"/>
        <parameter key="standard_imports" value="true"/>
      </operator>
      <connect from_op="Last Consumption" from_port="output" to_op="Main Script" to_port="input 1"/>
      <connect from_op="Result Model" from_port="output" to_op="Main Script" to_port="input 3"/>
      <connect from_op="Equipments (2)" from_port="output" to_op="Standby Script" to_port="input 2"/>
      <connect from_op="Last Consumption (2)" from_port="output" to_op="Standby Script" to_port="input 3"/>
      <connect from_op="Equipments" from_port="output" to_op="Main Script" to_port="input 2"/>
      <connect from_op="Response Model" from_port="output" to_op="Create Observation Script" to_port="input 2"/>
      <connect from_op="Main Script" from_port="output 1" to_op="Multiply" to_port="input"/>
      <connect from_op="Multiply" from_port="output 1" to_op="Standby Script" to_port="input 1"/>
      <connect from_op="Standby Script" from_port="output 1" to_op="With Consumption" to_port="example set input"/>
      <connect from_op="With Consumption" from_port="example set output" to_op="Multiply (2)" to_port="input"/>
      <connect from_op="Multiply (2)" from_port="output 1" to_op="Select Attributes" to_port="example set input"/>
      <connect from_op="Multiply (2)" from_port="output 2" to_op="Create Observation Script" to_port="input 1"/>
      <connect from_op="Select Attributes" from_port="example set output" to_port="result 1"/>
      <connect from_op="Create Observation Script" from_port="output 1" to_port="result 2"/>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
      <portSpacing port="sink_result 2" spacing="0"/>
      <portSpacing port="sink_result 3" spacing="0"/>
      <description align="center" color="yellow" colored="true" height="373" resized="true" width="1025" x="340" y="10">Recursive</description>
    </process>
  </operator>
</process>
